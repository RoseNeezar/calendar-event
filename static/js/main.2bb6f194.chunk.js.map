{"version":3,"sources":["hooks/useFormInput.js","component/Events/EventForms.js","component/EventsPopUp/EventPopList.js","component/EventsPopUp/EventPopUp.js","component/Bob.user.js/Bob.js","component/About.js","component/Robert.user.js/Robert.js","App.js","serviceWorker.js","index.js"],"names":["initialState","useState","value","setvalue","e","target","val","EventForms","closeForm","addEvents","calendarEvents","addCalendarEvent","useFormInput","eventTitle","seteventTitle","reseteventTitle","dateTime","setdateTime","resetdateTime","location","setlocation","resetlocation","Attendes","setAttendes","resetAttendes","AssignedTo","setAssignedTo","resetAssignedTo","className","onSubmit","preventDefault","title","handleSubmit","htmlFor","name","onChange","placeholder","id","EventPopList","eventList","List","map","st","key","ListItem","AlertDialog","openPopEvent","popEvent","eventsInfo","open","setOpen","seteventList","isFirstRun","useRef","useEffect","current","eventFilter","filter","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","Bob","BobEvents","BobCalendarEvent","user","redirect","setredirect","setcalendarEvents","start","setstart","allDay","setallDay","setopenPopEvent","setpopEvent","defaultView","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","events","dateClick","date","eventClick","event","About","Component","Robert","RobertEvents","RobertCalendarEvent","App","setBobEvents","setRobertEvents","setBobCalendarEvent","setRobertCalendarEvent","newCalendarEvent","calendarItems","uuid","newEvent","eventItem","exact","activeClassName","to","path","component","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bb6f194.chunk.js","sourcesContent":["import { useState } from \"react\";\nexport default initialState => {\n  const [value, setvalue] = useState(initialState);\n  const handleChange = e => {\n    setvalue(e.target.value);\n  };\n  const reset = val => {\n    setvalue(val);\n  };\n  return [value, handleChange, reset];\n};\n","import React from \"react\";\nimport \"./EventForms.css\";\nimport useFormInput from \"../../hooks/useFormInput\";\n\nfunction EventForms({\n  closeForm,\n  addEvents,\n  calendarEvents,\n  addCalendarEvent\n}) {\n  const [eventTitle, seteventTitle, reseteventTitle] = useFormInput(\"\");\n  const [dateTime, setdateTime, resetdateTime] = useFormInput(\"Time\");\n  const [location, setlocation, resetlocation] = useFormInput(\"\");\n  const [Attendes, setAttendes, resetAttendes] = useFormInput(0);\n  const [AssignedTo, setAssignedTo, resetAssignedTo] = useFormInput(\"Bob\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    closeForm();\n    addEvents({ eventTitle, dateTime, location, Attendes, AssignedTo });\n    calendarEvents.title = eventTitle;\n    calendarEvents.AssignedTo = AssignedTo;\n    addCalendarEvent(calendarEvents);\n    reseteventTitle();\n    resetdateTime();\n    resetlocation();\n    resetAttendes(0);\n    resetAssignedTo(\"Bob\");\n  };\n\n  return (\n    <div className=\"formEvent\">\n      <div className=\"container-fluid\">\n        <div className=\"row justify-content-center m-4\">\n          <div className=\"col-12 col-sm-8 col-md-7\">\n            <h1>Event form</h1>\n            <form className=\"Form-container\" onSubmit={e => handleSubmit(e)}>\n              <div className=\"form-group\">\n                <label htmlFor=\"eventTitle\" className=\"float-left\">\n                  Event Title\n                </label>\n                <input\n                  name=\"eventTitle\"\n                  value={eventTitle}\n                  onChange={seteventTitle}\n                  placeholder=\"Event Title\"\n                  className=\"form-control mb-4\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"dateTime\" className=\"float-left\">\n                  Date and time\n                </label>\n                <input\n                  name=\"dateTime\"\n                  value={dateTime}\n                  onChange={setdateTime}\n                  placeholder=\"date and time\"\n                  className=\"form-control\"\n                  id=\"date-time\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"location\" className=\"float-left\">\n                  Location\n                </label>\n                <input\n                  name=\"location\"\n                  value={location}\n                  onChange={setlocation}\n                  placeholder=\"Location\"\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"Attendes\" className=\"float-left\">\n                  Number of people attending\n                </label>\n                <input\n                  name=\"Attendes\"\n                  value={Attendes}\n                  onChange={setAttendes}\n                  placeholder=\"Attendes\"\n                  className=\"form-control\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"user\" className=\"float-left\">\n                  Assign to\n                </label>\n                <select\n                  name=\"AssignedTo\"\n                  className=\"form-control\"\n                  onChange={setAssignedTo}\n                >\n                  <option value={\"Bob\"} name=\"AssignedTo\">\n                    Bob\n                  </option>\n                  <option value={\"Robert\"} name=\"AssignedTo\">\n                    Robert\n                  </option>\n                </select>\n              </div>\n              <button className=\"btn bg-black btn-block text-white\">\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EventForms;\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport EventPopItem from \"./EventPopItem\";\n\nfunction EventPopList({ eventList }) {\n  return (\n    <List>\n      {eventList.map(st => {\n        return (\n          <div key={st.id}>\n            <ListItem>Date/Time : {st.dateTime}</ListItem>\n            <ListItem>Location : {st.location}</ListItem>\n            <ListItem>Number Of People : {st.Attendes}</ListItem>\n            <ListItem>Assigned To : {st.AssignedTo}</ListItem>\n          </div>\n        );\n      })}\n    </List>\n  );\n}\n\nexport default EventPopList;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport EventPopList from \"./EventPopList\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function AlertDialog({ openPopEvent, popEvent, eventsInfo }) {\n  const [open, setOpen] = useState(false);\n  const [eventList, seteventList] = useState(\"\");\n  const isFirstRun = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    const setOpenPop = () => {\n      return setOpen(true);\n    };\n    setOpenPop();\n  }, [openPopEvent]);\n\n  useEffect(() => {\n    const eventFilter = eventsInfo.filter(e => e.eventTitle === popEvent);\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    const setEventPop = () => {\n      return seteventList(eventFilter);\n    };\n    setEventPop();\n  }, [open]);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{popEvent}</DialogTitle>\n        <EventPopList eventList={eventList} popEvent={popEvent} />\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./Bob.css\";\nimport EventForm from \"../Events/EventForms\";\nimport EventPopUp from \"../EventsPopUp/EventPopUp\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nfunction Bob({\n  BobEvents,\n  addEvents,\n  addCalendarEvent,\n  BobCalendarEvent,\n  user = \"Bob\"\n}) {\n  const [redirect, setredirect] = useState(false);\n\n  const [calendarEvents, setcalendarEvents] = useState([]);\n  const [start, setstart] = useState();\n  const [allDay, setallDay] = useState(true);\n  const [openPopEvent, setopenPopEvent] = useState(false);\n  const [popEvent, setpopEvent] = useState(\"\");\n\n  const handlePopEvent = e => {\n    setopenPopEvent(!openPopEvent);\n    setpopEvent(e.event.title);\n  };\n\n  const handleChange = e => {\n    setstart(e.date);\n    setallDay(true);\n  };\n\n  useEffect(() => {\n    return () => {\n      setredirect(true);\n    };\n  }, [start]);\n\n  const closeForm = () => {\n    setredirect(false);\n  };\n\n  useEffect(() => {\n    const calendarSetter = () => {\n      return setcalendarEvents({ start, allDay, user });\n    };\n    calendarSetter();\n  }, [start]);\n\n  return (\n    <div className=\"Bob\">\n      {redirect ? (\n        <EventForm\n          closeForm={closeForm}\n          addEvents={addEvents}\n          addCalendarEvent={addCalendarEvent}\n          calendarEvents={calendarEvents}\n        />\n      ) : (\n        <div className=\"Calendar\">\n          <h1>Bob's Event</h1>\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            header={{\n              left: \"prev,next today\",\n              center: \"title\",\n              right: \"\"\n            }}\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            events={BobCalendarEvent}\n            dateClick={handleChange}\n            eventClick={handlePopEvent}\n          />\n          <EventPopUp\n            openPopEvent={openPopEvent}\n            eventsInfo={BobEvents}\n            popEvent={popEvent}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Bob;\n","import React, { Component } from \"react\";\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div className=\"About\">\n        <h1>ABOUT!!</h1>\n        <ul>\n          <li className=\"float-left block\">\n            In Bob Component click the dates on the calendar, it will take you\n            to a form to fill\n          </li>\n          <li className=\"float-left block\">\n            at the option selector,can select to assign to bob or robert\n          </li>\n          <li className=\"float-left block\">\n            events will be displayed on either bob or robert depending on the\n            selected option\n          </li>\n          <li className=\"float-left block\">need to add better styling</li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./Robert.css\";\nimport EventForm from \"../Events/EventForms\";\nimport EventPopUp from \"../EventsPopUp/EventPopUp\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nfunction Robert({\n  RobertEvents,\n  addEvents,\n  addCalendarEvent,\n  RobertCalendarEvent,\n  user = \"Robert\"\n}) {\n  const [redirect, setredirect] = useState(false);\n\n  const [calendarEvents, setcalendarEvents] = useState([]);\n  const [start, setstart] = useState();\n  const [allDay, setallDay] = useState(true);\n  const [openPopEvent, setopenPopEvent] = useState(false);\n  const [popEvent, setpopEvent] = useState(\"\");\n\n  const handlePopEvent = e => {\n    setopenPopEvent(!openPopEvent);\n    setpopEvent(e.event.title);\n  };\n\n  const handleChange = e => {\n    setstart(e.date);\n    setallDay(true);\n  };\n\n  useEffect(() => {\n    return () => {\n      setredirect(true);\n    };\n  }, [start]);\n\n  const closeForm = () => {\n    setredirect(false);\n  };\n\n  useEffect(() => {\n    const calendarSetter = () => {\n      return setcalendarEvents({ start, allDay, user });\n    };\n    calendarSetter();\n  }, [start]);\n\n  return (\n    <div className=\"Robert\">\n      {redirect ? (\n        <EventForm\n          closeForm={closeForm}\n          addEvents={addEvents}\n          addCalendarEvent={addCalendarEvent}\n          calendarEvents={calendarEvents}\n        />\n      ) : (\n        <div className=\"Calendar\">\n          <h1>Robert's Event</h1>\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            header={{\n              left: \"prev,next today\",\n              center: \"title\",\n              right: \"\"\n            }}\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            events={RobertCalendarEvent}\n            dateClick={handleChange}\n            eventClick={handlePopEvent}\n          />\n\n          <EventPopUp\n            openPopEvent={openPopEvent}\n            eventsInfo={RobertEvents}\n            popEvent={popEvent}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Robert;\n","import React, { useState } from \"react\";\nimport { Route, Switch, NavLink } from \"react-router-dom\";\nimport \"./App.css\";\nimport Bob from \"./component/Bob.user.js/Bob\";\nimport About from \"./component/About\";\nimport Robert from \"./component/Robert.user.js/Robert\";\nimport uuid from \"uuid/v4\";\n\nfunction App() {\n  const [BobEvents, setBobEvents] = useState([]);\n  const [RobertEvents, setRobertEvents] = useState([]);\n  const [BobCalendarEvent, setBobCalendarEvent] = useState([]);\n  const [RobertCalendarEvent, setRobertCalendarEvent] = useState([]);\n\n  const addCalendarEvent = newCalendarEvent => {\n    let calendarItems = { ...newCalendarEvent, id: uuid() };\n    if (newCalendarEvent.AssignedTo === \"Bob\") {\n      setBobCalendarEvent([...BobCalendarEvent, calendarItems]);\n    } else {\n      setRobertCalendarEvent([...RobertCalendarEvent, calendarItems]);\n    }\n  };\n\n  const addEvents = newEvent => {\n    let eventItem = { ...newEvent, id: uuid() };\n    if (newEvent.AssignedTo === \"Bob\") {\n      setBobEvents([...BobEvents, eventItem]);\n    } else {\n      setRobertEvents([...RobertEvents, eventItem]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <nav className=\"App-nav\">\n        <NavLink exact activeClassName=\"active-link\" to=\"/\">\n          About\n        </NavLink>\n        <NavLink exact activeClassName=\"active-link\" to=\"/Bob\">\n          Bob\n        </NavLink>\n        <NavLink exact activeClassName=\"active-link\" to=\"/Robert\">\n          Robert\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route exact path=\"/\" component={About} />\n        <Route\n          exact\n          path=\"/Bob\"\n          render={() => (\n            <Bob\n              BobEvents={BobEvents}\n              addEvents={addEvents}\n              BobCalendarEvent={BobCalendarEvent}\n              addCalendarEvent={addCalendarEvent}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/Robert\"\n          render={() => (\n            <Robert\n              RobertEvents={RobertEvents}\n              addEvents={addEvents}\n              RobertCalendarEvent={RobertCalendarEvent}\n              addCalendarEvent={addCalendarEvent}\n            />\n          )}\n        />\n      </Switch>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"@fullcalendar/core/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}