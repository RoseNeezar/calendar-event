{"version":3,"sources":["component/Event.js","component/EventList.js","component/Bob.js","component/About.js","component/Robert.js","component/EventForms.js","App.js","serviceWorker.js","index.js"],"names":["Event","props","state","isOpen","toggleAccordion","bind","this","setState","onClick","className","currentDate","Collapse","style","width","eventTitle","dateTime","location","Attendes","Component","EventList","BobEvents","map","st","Bob","date","Date","redirect","handleChange","convert","e","str","mnth","getMonth","slice","getDate","getFullYear","join","toString","onClickDay","value","push","to","About","Robert","RobertEvents","ev","AssignedTo","EventForms","handleSubmit","target","name","preventDefault","addEvents","onSubmit","htmlFor","onChange","placeholder","App","newEvent","exact","activeClassName","path","component","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dc53c5a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse } from \"reactstrap\";\n\nexport default class Event extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.toggleAccordion = this.toggleAccordion.bind(this);\n  }\n\n  toggleAccordion() {\n    this.setState({ isOpen: !this.state.isOpen });\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          onClick={this.toggleAccordion}\n          className=\"port-item p-4 bg-primary\"\n        >\n          <button className=\"btn btn-primary\">{this.props.currentDate}</button>\n        </div>\n        <Collapse isOpen={this.state.isOpen}>\n          <div className=\"card\" style={{ width: \"18rem\" }}>\n            <div className=\"card-header\">{this.props.eventTitle}</div>\n            <ul className=\"list-group list-group-flush\">\n              <li className=\"list-group-item\">Date : {this.props.dateTime}</li>\n              <li className=\"list-group-item\">\n                Location : {this.props.location}\n              </li>\n              <li className=\"list-group-item\">\n                Number of people : {this.props.Attendes}\n              </li>\n            </ul>\n          </div>\n        </Collapse>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Event from \"./Event\";\n\nexport default class EventList extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.BobEvents.map(st => {\n          return (\n            <Event\n              eventTitle={st.eventTitle}\n              dateTime={st.dateTime}\n              location={st.location}\n              Attendes={st.Attendes}\n              currentDate={this.props.currentDate}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Calendar from \"react-calendar\";\nimport \"./Bob.css\";\nimport EventList from \"./EventList\";\n\nexport default class Bob extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      redirect: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.convert = this.convert.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      date: e,\n      redirect: true\n    });\n  }\n  convert(str) {\n    var date = new Date(str),\n      mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n      day = (\"0\" + date.getDate()).slice(-2);\n    return [day, mnth, date.getFullYear()].join(\"/\");\n  }\n\n  render() {\n    const formatDate = this.convert(this.state.date.toString());\n    return (\n      <div className=\"Bob\">\n        <h1> Bob</h1>\n        <div className=\"Calendar\">\n          <Calendar onClickDay={this.handleChange} value={this.state.date} />\n          <EventList\n            BobEvents={this.props.BobEvents}\n            currentDate={this.state.date.toString()}\n          />\n        </div>\n        {this.state.redirect && <Redirect push to=\"/EventForms\" />}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div className=\"About\">\n        <h1>ABOUT!!</h1>\n        <ul>\n          <li>Click bob</li>\n          <li>In Bob Component click the dates on the calendar</li>\n          <li>It will take you to a form to fill</li>\n          <li>at the option selector,can select to assign to bob or robert</li>\n          <li>\n            events will be displayed on either bob or robert depending on the\n            selected option\n          </li>\n          <li>\n            current state need to manually click back the component name to go\n            back to bob or robert from form\n          </li>\n          <li>need to add better styling</li>\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Calendar from \"react-calendar\";\n\nexport default class Robert extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      redirect: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.convert = this.convert.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      date: e,\n      redirect: true\n    });\n  }\n  convert(str) {\n    var date = new Date(str),\n      mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\n      day = (\"0\" + date.getDate()).slice(-2);\n    return [day, mnth, date.getFullYear()].join(\"/\");\n  }\n\n  render() {\n    const formatDate = this.convert(this.state.date.toString());\n    return (\n      <div className=\"Robert\">\n        {this.state.redirect && <Redirect push to=\"/EventForms\" />}\n        <h1>Robert</h1>\n        <div className=\"Calendar\">\n          <Calendar onClickDay={this.handleChange} value={this.state.date} />\n          {this.props.RobertEvents.map(ev => {\n            return (\n              <div>\n                <h1>{ev.eventTitle}</h1>\n                <li>{ev.dateTime}</li>\n                <li>{ev.location}</li>\n                <li>{ev.Attendes}</li>\n                <li>{ev.AssignedTo}</li>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./EventForms.css\";\n\nexport default class EventForms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventTitle: \"\",\n      dateTime: \"\",\n      location: \"\",\n      Attendes: 0,\n      AssignedTo: \"Bob\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.addEvents(this.state);\n    this.setState({\n      eventTitle: \"\",\n      dateTime: \"\",\n      location: \"\",\n      Attendes: 0,\n      AssignedTo: \"Bob\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"formEvent\">\n        <div className=\"container-fluid\">\n          <div className=\"row justify-content-center m-4\">\n            <div className=\"col-12 col-sm-8 col-md-7\">\n              <h1>Event form</h1>\n              <form className=\"Form-container\" onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"eventTitle\" className=\"float-left\">\n                    Event Title\n                  </label>\n                  <input\n                    name=\"eventTitle\"\n                    value={this.state.eventTitle}\n                    onChange={this.handleChange}\n                    placeholder=\"Event Title\"\n                    className=\"form-control mb-4\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"dateTime\" className=\"float-left\">\n                    Date and time\n                  </label>\n                  <input\n                    name=\"dateTime\"\n                    value={this.state.dateTime}\n                    onChange={this.handleChange}\n                    placeholder=\"Date and time\"\n                    className=\"form-control\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"location\" className=\"float-left\">\n                    Location\n                  </label>\n                  <input\n                    name=\"location\"\n                    value={this.state.location}\n                    onChange={this.handleChange}\n                    placeholder=\"Location\"\n                    className=\"form-control\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"Attendes\" className=\"float-left\">\n                    Number of people attending\n                  </label>\n                  <input\n                    name=\"Attendes\"\n                    value={this.state.Attendes}\n                    onChange={this.handleChange}\n                    placeholder=\"Attendes\"\n                    className=\"form-control\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"user\" className=\"float-left\">\n                    Assign to\n                  </label>\n                  <select\n                    name=\"AssignedTo\"\n                    className=\"form-control\"\n                    onChange={this.handleChange}\n                  >\n                    <option value={\"Bob\"} name=\"AssignedTo\">\n                      Bob\n                    </option>\n                    <option value={\"Robert\"} name=\"AssignedTo\">\n                      Robert\n                    </option>\n                  </select>\n                </div>\n                <button className=\"btn bg-black btn-block text-white\">\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Route, Switch, NavLink } from \"react-router-dom\";\nimport \"./App.css\";\nimport Bob from \"./component/Bob\";\nimport About from \"./component/About\";\nimport Robert from \"./component/Robert\";\nimport EventForms from \"./component/EventForms\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      BobEvents: [],\n      RobertEvents: []\n    };\n    this.addEvents = this.addEvents.bind(this);\n  }\n\n  addEvents(newEvent) {\n    if (newEvent.AssignedTo === \"Bob\") {\n      this.setState({\n        BobEvents: [...this.state.BobEvents, newEvent]\n      });\n    } else {\n      this.setState({\n        RobertEvents: [...this.state.RobertEvents, newEvent]\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"App-nav\">\n          <NavLink exact activeClassName=\"active-link\" to=\"/\">\n            About\n          </NavLink>\n          <NavLink exact activeClassName=\"active-link\" to=\"/Bob\">\n            Bob\n          </NavLink>\n          <NavLink exact activeClassName=\"active-link\" to=\"/Robert\">\n            Robert\n          </NavLink>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={About} />\n          <Route\n            exact\n            path=\"/Bob\"\n            render={() => <Bob BobEvents={this.state.BobEvents} />}\n          />\n          <Route\n            exact\n            path=\"/Robert\"\n            render={() => <Robert RobertEvents={this.state.RobertEvents} />}\n          />\n          <Route\n            exact\n            path=\"/EventForms\"\n            render={() => <EventForms addEvents={this.addEvents} />}\n          />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}